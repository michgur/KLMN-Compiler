int a = 1; int b = 2;
public void main(string[] args) {
    for (float i = 0; i < 2f; i++)
    for (float j = 0; j < 2f; j++)
    for (float k = 0; k < 2f; k++)
    for (float l = 0; l < 2f; l++)
    for (float m = 0; m < 2f; m++)
    if (i / 2 == 0f && j / 2 == 0f)
        print a * 2 == b;
}

#
# Compiler Structure:
#   Grammar is composed of Symbols (Terminals & non-Terminals), and their productions.
#   Tokenizer splits source code into Tokens. Each Token is associated with a corresponding Terminal Symbol.
#   ASTFactory defines behavior for all Symbol productions.
#   Parser takes Grammar & Factory, generates an AST.
#   The AST nodes can contain specific instructions for code generation (defined in the ASTFactory).
#
