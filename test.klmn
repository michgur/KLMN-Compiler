public float max(float a, float b) {
    if (a > b) return a;
    return b;
}

public void pooPrint() { print poo; }

int poo = 1f;
string bananas = "bananas " + "in pajamas";
string b = bananas;
public void main(stringArr args) {
    float f = 1 * 1f;
    float poo = 2;
    int poo2 = 2f;
    print "hello, " + poo + ", how r u?";
    print poo, poo2,;
    pooPrint();
}

#
# Compiler Structure:
#   Grammar is composed of Symbols (Terminals & non-Terminals), and their productions.
#   Tokenizer splits source code into Tokens. Each Token is associated with a corresponding Terminal Symbol.
#   ASTFactory defines behavior for all Symbol productions.
#   Parser takes Grammar & Factory, generates an AST.
#   The AST nodes can contain specific instructions for code generation (defined in the ASTFactory).
#
