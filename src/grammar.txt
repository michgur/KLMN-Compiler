# TEMPORARY

Symbol S = new Symbol("STMT"), B = new Symbol("BLOCK"),
                E = new Symbol("EXPR"), T = new Symbol("T"), F = new Symbol("F"), O = new Symbol("O");

B.addProduction().addProduction(Terminal.END_OF_INPUT).addProduction(S).addProduction(B, S);
O.addProduction(Token.Type.NUMBER.t).addProduction(Token.Type.IDENTIFIER.t)
.addProduction(Token.Type.STRING.t).addProduction(Token.Type.TRUE.t).addProduction(Token.Type.FALSE.t);
// type name = EXPR ;
S.addProduction(Token.Type.IDENTIFIER.t, Token.Type.IDENTIFIER.t, Token.Type.EQUALS.t, E, Token.Type.SEMICOLON.t);
E.addProduction(T).addProduction(E, Token.Type.OPEN_BRACKET.t, E, Token.Type.CLOSE_BRACKET.t)
.addProduction(E, Token.Type.PLUS.t, T).addProduction(E, Token.Type.DASH.t, T);
T.addProduction(T, Token.Type.ASTERISK.t, F).addProduction(T, Token.Type.SLASH.t, F).addProduction(F);
F.addProduction(Token.Type.OPEN_PAREN.t, E, Token.Type.CLOSE_PAREN.t).addProduction(O);
// function definition
// return_type name { BLOCK }
S.addProduction(Token.Type.IDENTIFIER.t, Token.Type.IDENTIFIER.t, Token.Type.OPEN_CURLY.t, B, Token.Type.CLOSE_CURLY.t)
// class definition
// class name { BLOCK }
.addProduction(Token.Type.CLASS.t, Token.Type.IDENTIFIER.t, Token.Type.OPEN_CURLY.t, B, Token.Type.CLOSE_CURLY.t);
